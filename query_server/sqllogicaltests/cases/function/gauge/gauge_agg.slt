include ./../setup.slt


##########
## Query
##########


query 
select gauge_agg(time, f1 order by time) from func_tbl;
----
{first: {ts: 1999-12-31T00:00:00, val: 444.0}, second: {ts: 1999-12-31T00:00:00.005, val: 444.0}, penultimate: {ts: 1999-12-31T00:10:00.030, val: 333.0}, last: {ts: 1999-12-31T01:00:00.035, val: 222.0}, num_elements: 8}

query 
select gauge_agg(time, f0 order by time) from func_tbl;
----
{first: {ts: 1999-12-31T00:00:00, val: 111.0}, second: {ts: 1999-12-31T00:00:00.005, val: 222.0}, penultimate: {ts: 1999-12-31T00:10:00.030, val: 444.0}, last: {ts: 1999-12-31T01:00:00.035, val: 555.0}, num_elements: 8}

statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(Timestamp\(Nanosecond, None\), Utf8\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(time, t0 order by time) from func_tbl;


query 
select gauge_agg(time, f0) as gauge from func_tb2;
----
{first: {ts: 1970-01-01T00:00:00.000000100, val: 1000.0}, second: {ts: 1970-01-01T00:00:00.000000101, val: 1001.0}, penultimate: {ts: 1970-01-01T00:00:00.000000106, val: 1004.0}, last: {ts: 1970-01-01T00:00:00.000000107, val: 1000.0}, num_elements: 8}


query 
select gauge_agg(time, f1) as gauge from func_tb2;
----
{first: {ts: 1970-01-01T00:00:00.000000100, val: 2010.0}, second: {ts: 1970-01-01T00:00:00.000000101, val: 2000.0}, penultimate: {ts: 1970-01-01T00:00:00.000000106, val: 2000.0}, last: {ts: 1970-01-01T00:00:00.000000107, val: 2000.0}, num_elements: 8}


statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(Timestamp\(Nanosecond, None\), Boolean\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(time, f2) as gauge from func_tb2;
---


statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(Timestamp\(Nanosecond, None\), Utf8\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(time, f3) as gauge from func_tb2;
---


statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(Timestamp\(Nanosecond, None\), Utf8\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(time, f3) as gauge from func_tb2;
---

statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(Timestamp\(Nanosecond, None\), Timestamp\(Nanosecond, None\)\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(time, time) as gauge from func_tb2;
---

statement error Arrow error: Io error: Status \{ code: Internal, message: "Could not chunk result: Arrow: Parser error: Error parsing timestamp from .*?: timestamp must contain at least 10 characters", *
select gauge_agg(t0, f0) as gauge from func_tb2;
---

statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: No function matches the given name and argument types 'gauge_agg\(UInt64, UInt64\)'\. You might need to add explicit type casts\.\\n\\tCandidate functions:\\n\\tgauge_agg\(Timestamp\(Second, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Millisecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Microsecond, None\), Float64\)\\n\\tgauge_agg\(Timestamp\(Nanosecond, None\), Float64\)", *
select gauge_agg(f0, f0) as gauge from func_tb2;


query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: The function \\"gauge_agg\\" does not accept 1 function arguments\.", *
select gauge_agg(time) as gauge from func_tb2;



statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: sql parser error: Expected an expression:, found: ,", *
select gauge_agg(,f0) as gauge from func_tb2;


statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: The function \\"gauge_agg\\" does not accept 0 function arguments\.", *
select gauge_agg() as gauge from func_tb2;

statement error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: The function \\"gauge_agg\\" does not accept 3 function arguments\.", *
select gauge_agg(time, f0, f1) as gauge from func_tb2;

statement ok
drop database if exists gauge_agg_unorder;

statement ok
create database gauge_agg_unorder;

statement ok
--#DATABASE=gauge_agg_unorder

statement ok
alter database gauge_agg_unorder set vnode_duration '1d';

statement ok
CREATE TABLE unorder(x DOUBLE,y DOUBLE);

query T
INSERT INTO unorder (TIME, x, y)
VALUES
    ('1970-01-01 00:00:00.000000001', 1, 1),
    ('1970-01-02 00:00:00.000000002', 1, 2),
    ('1970-01-03 00:00:00.000000003', 1, 3),
    ('1970-01-04 00:00:00.000000004', 1, 4),
    ('1970-01-05 00:00:00.000000005', 1, 5),
    ('1970-01-06 00:00:00.000000006', 2, 1),
    ('1970-01-07 00:00:00.000000007', 2, 2),
    ('1970-01-08 00:00:00.000000008', 2, 3),
    ('1970-01-09 00:00:00.000000009', 2, 4),
    ('1970-01-10 00:00:00.000000010', 2, 5);
----
10

query T
SELECT gauge_agg(time, x) FROM unorder GROUP BY date_trunc('day', time);
----
{first: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, second: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, penultimate: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, last: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, second: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, penultimate: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, last: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, second: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, penultimate: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, last: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, second: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, penultimate: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, last: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, second: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, penultimate: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, last: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, second: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, penultimate: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, last: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, second: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, penultimate: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, last: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, second: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, penultimate: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, last: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, second: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, penultimate: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, last: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, second: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, penultimate: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, last: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, num_elements: 1}

query T
SELECT gauge_agg(time, x) FROM unorder GROUP BY date_trunc('day', time);
----
{first: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, second: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, penultimate: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, last: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, second: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, penultimate: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, last: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, second: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, penultimate: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, last: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, second: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, penultimate: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, last: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, second: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, penultimate: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, last: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, second: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, penultimate: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, last: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, second: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, penultimate: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, last: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, second: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, penultimate: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, last: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, second: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, penultimate: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, last: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, second: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, penultimate: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, last: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, num_elements: 1}

query T
SELECT gauge_agg(time, x) FROM unorder GROUP BY date_trunc('day', time);
----
{first: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, second: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, penultimate: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, last: {ts: 1970-01-01T00:00:00.000000001, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, second: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, penultimate: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, last: {ts: 1970-01-02T00:00:00.000000002, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, second: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, penultimate: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, last: {ts: 1970-01-03T00:00:00.000000003, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, second: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, penultimate: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, last: {ts: 1970-01-04T00:00:00.000000004, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, second: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, penultimate: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, last: {ts: 1970-01-05T00:00:00.000000005, val: 1.0}, num_elements: 1}
{first: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, second: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, penultimate: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, last: {ts: 1970-01-06T00:00:00.000000006, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, second: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, penultimate: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, last: {ts: 1970-01-07T00:00:00.000000007, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, second: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, penultimate: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, last: {ts: 1970-01-08T00:00:00.000000008, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, second: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, penultimate: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, last: {ts: 1970-01-09T00:00:00.000000009, val: 2.0}, num_elements: 1}
{first: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, second: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, penultimate: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, last: {ts: 1970-01-10T00:00:00.000000010, val: 2.0}, num_elements: 1}

statement ok
drop database if exists gauge_agg_unorder;

statement ok
drop table if exists test_nth_value;


# 创建测试表
statement ok
CREATE TABLE IF NOT EXISTS test_nth_value (
    category string,
    value bigint
);

# 插入测试数据
statement ok
INSERT INTO test_nth_value (time, category, value) VALUES
(1, 'A', 10),
(2, 'A', 20),
(3, 'A', 30),
(4, 'B', 40),
(5, 'B', 50),
(6, 'C', 60),
(7, 'C', 70),
(8, 'C', 80),
(9, 'C', 90);

# 基本使用：计算窗口框架的第n个值
query 
SELECT
    time,
    category,
    value,
    NTH_VALUE(value, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS nth_value
FROM test_nth_value
ORDER BY category, time;
----
1970-01-01T00:00:00.000000001 "A" 10 20
1970-01-01T00:00:00.000000002 "A" 20 20
1970-01-01T00:00:00.000000003 "A" 30 20
1970-01-01T00:00:00.000000004 "B" 40 50
1970-01-01T00:00:00.000000005 "B" 50 50
1970-01-01T00:00:00.000000006 "C" 60 70
1970-01-01T00:00:00.000000007 "C" 70 70
1970-01-01T00:00:00.000000008 "C" 80 70
1970-01-01T00:00:00.000000009 "C" 90 70

# 不同窗口框架的使用
query 
SELECT
    time,
    category,
    value,
    NTH_VALUE(value, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS nth_value
FROM test_nth_value
ORDER BY category, time;
----
1970-01-01T00:00:00.000000001 "A" 10 NULL
1970-01-01T00:00:00.000000002 "A" 20 20
1970-01-01T00:00:00.000000003 "A" 30 20
1970-01-01T00:00:00.000000004 "B" 40 NULL
1970-01-01T00:00:00.000000005 "B" 50 50
1970-01-01T00:00:00.000000006 "C" 60 NULL
1970-01-01T00:00:00.000000007 "C" 70 70
1970-01-01T00:00:00.000000008 "C" 80 70
1970-01-01T00:00:00.000000009 "C" 90 70

# 没有分区的情况下使用nth_value函数
query 
SELECT
    time,
    category,
    value,
    NTH_VALUE(value, 2) OVER (ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS nth_value
FROM test_nth_value
ORDER BY time;
----
1970-01-01T00:00:00.000000001 "A" 10 20
1970-01-01T00:00:00.000000002 "A" 20 20
1970-01-01T00:00:00.000000003 "A" 30 20
1970-01-01T00:00:00.000000004 "B" 40 20
1970-01-01T00:00:00.000000005 "B" 50 20
1970-01-01T00:00:00.000000006 "C" 60 20
1970-01-01T00:00:00.000000007 "C" 70 20
1970-01-01T00:00:00.000000008 "C" 80 20
1970-01-01T00:00:00.000000009 "C" 90 20

# 错误输入测试

# 错误输入: nth_value函数不带OVER子句
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'nth_value'\.\\nDid you mean 'LAST_VALUE'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 2)
FROM test_nth_value order by time;

# 错误输入: nth_value函数的OVER子句中没有PARTITION BY或ORDER BY
query 
SELECT time, category, value, NTH_VALUE(value, 2) OVER ()
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 20
1970-01-01T00:00:00.000000002 "A" 20 20
1970-01-01T00:00:00.000000003 "A" 30 20
1970-01-01T00:00:00.000000004 "B" 40 20
1970-01-01T00:00:00.000000005 "B" 50 20
1970-01-01T00:00:00.000000006 "C" 60 20
1970-01-01T00:00:00.000000007 "C" 70 20
1970-01-01T00:00:00.000000008 "C" 80 20
1970-01-01T00:00:00.000000009 "C" 90 20

# 错误输入: nth_value函数的OVER子句中带有无效的排序列
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Schema error: No field named non_existent_column\. Valid fields are test_nth_value\.time, test_nth_value\.category, test_nth_value\.value\.", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 2) OVER (PARTITION BY category ORDER BY non_existent_column)
FROM test_nth_value order by time;

# 错误输入: nth_value函数的OVER子句中带有无效的分区列
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Schema error: No field named non_existent_column\. Valid fields are test_nth_value\.time, test_nth_value\.category, test_nth_value\.value\.", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 2) OVER (PARTITION BY non_existent_column ORDER BY time)
FROM test_nth_value order by time;

# 错误输入: nth_value函数使用聚合函数
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Projection references non\-aggregate values: Expression test_nth_value\.value could not be resolved from available columns: test_nth_value\.category, SUM\(test_nth_value\.value\)", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT category, SUM(value), NTH_VALUE(value, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value
GROUP BY category;

# 错误输入: nth_value函数的参数类型不匹配
query 
SELECT time, category, value, NTH_VALUE('invalid_value', 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 "invalid_value"
1970-01-01T00:00:00.000000002 "A" 20 "invalid_value"
1970-01-01T00:00:00.000000003 "A" 30 "invalid_value"
1970-01-01T00:00:00.000000004 "B" 40 "invalid_value"
1970-01-01T00:00:00.000000005 "B" 50 "invalid_value"
1970-01-01T00:00:00.000000006 "C" 60 "invalid_value"
1970-01-01T00:00:00.000000007 "C" 70 "invalid_value"
1970-01-01T00:00:00.000000008 "C" 80 "invalid_value"
1970-01-01T00:00:00.000000009 "C" 90 "invalid_value"

# 错误输入: nth_value函数中混合不同类型的排序列
query 
SELECT time, category, value, NTH_VALUE(value, 2) OVER (ORDER BY time, category, value)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 NULL
1970-01-01T00:00:00.000000002 "A" 20 20
1970-01-01T00:00:00.000000003 "A" 30 20
1970-01-01T00:00:00.000000004 "B" 40 20
1970-01-01T00:00:00.000000005 "B" 50 20
1970-01-01T00:00:00.000000006 "C" 60 20
1970-01-01T00:00:00.000000007 "C" 70 20
1970-01-01T00:00:00.000000008 "C" 80 20
1970-01-01T00:00:00.000000009 "C" 90 20

# 错误输入: nth_value函数的窗口框架定义错误
query 
SELECT time, category, value, NTH_VALUE(value, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 20
1970-01-01T00:00:00.000000002 "A" 20 30
1970-01-01T00:00:00.000000003 "A" 30 NULL
1970-01-01T00:00:00.000000004 "B" 40 50
1970-01-01T00:00:00.000000005 "B" 50 NULL
1970-01-01T00:00:00.000000006 "C" 60 70
1970-01-01T00:00:00.000000007 "C" 70 80
1970-01-01T00:00:00.000000008 "C" 80 90
1970-01-01T00:00:00.000000009 "C" 90 NULL

# 类型不匹配错误示例
# 错误输入: nth_value的expression为BOOLEAN类型
query 
SELECT time, category, value, NTH_VALUE(TRUE, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 true
1970-01-01T00:00:00.000000002 "A" 20 true
1970-01-01T00:00:00.000000003 "A" 30 true
1970-01-01T00:00:00.000000004 "B" 40 true
1970-01-01T00:00:00.000000005 "B" 50 true
1970-01-01T00:00:00.000000006 "C" 60 true
1970-01-01T00:00:00.000000007 "C" 70 true
1970-01-01T00:00:00.000000008 "C" 80 true
1970-01-01T00:00:00.000000009 "C" 90 true

# 错误输入: nth_value的expression为FLOAT类型
query 
SELECT time, category, value, NTH_VALUE(3.14, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 3.14
1970-01-01T00:00:00.000000002 "A" 20 3.14
1970-01-01T00:00:00.000000003 "A" 30 3.14
1970-01-01T00:00:00.000000004 "B" 40 3.14
1970-01-01T00:00:00.000000005 "B" 50 3.14
1970-01-01T00:00:00.000000006 "C" 60 3.14
1970-01-01T00:00:00.000000007 "C" 70 3.14
1970-01-01T00:00:00.000000008 "C" 80 3.14
1970-01-01T00:00:00.000000009 "C" 90 3.14

# 错误输入: nth_value的expression为DATE类型
query 
SELECT time, category, value, NTH_VALUE(DATE '2024-08-08', 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 2024-08-08
1970-01-01T00:00:00.000000002 "A" 20 2024-08-08
1970-01-01T00:00:00.000000003 "A" 30 2024-08-08
1970-01-01T00:00:00.000000004 "B" 40 2024-08-08
1970-01-01T00:00:00.000000005 "B" 50 2024-08-08
1970-01-01T00:00:00.000000006 "C" 60 2024-08-08
1970-01-01T00:00:00.000000007 "C" 70 2024-08-08
1970-01-01T00:00:00.000000008 "C" 80 2024-08-08
1970-01-01T00:00:00.000000009 "C" 90 2024-08-08

# 错误输入: nth_value的expression为ARRAY类型
query 
SELECT time, category, value, NTH_VALUE(ARRAY[1,2,3], 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 [1, 2, 3]
1970-01-01T00:00:00.000000002 "A" 20 [1, 2, 3]
1970-01-01T00:00:00.000000003 "A" 30 [1, 2, 3]
1970-01-01T00:00:00.000000004 "B" 40 [1, 2, 3]
1970-01-01T00:00:00.000000005 "B" 50 [1, 2, 3]
1970-01-01T00:00:00.000000006 "C" 60 [1, 2, 3]
1970-01-01T00:00:00.000000007 "C" 70 [1, 2, 3]
1970-01-01T00:00:00.000000008 "C" 80 [1, 2, 3]
1970-01-01T00:00:00.000000009 "C" 90 [1, 2, 3]

# 错误输入: nth_value的expression为MAP类型
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'map'\.\\nDid you mean 'MAX'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(MAP('key', 'value'), 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value的expression为结构体类型
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'row'\.\\nDid you mean 'now'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(ROW(1, 'text'), 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value的n参数为负数
query 
SELECT time, category, value, NTH_VALUE(value, -1) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 NULL
1970-01-01T00:00:00.000000002 "A" 20 NULL
1970-01-01T00:00:00.000000003 "A" 30 NULL
1970-01-01T00:00:00.000000004 "B" 40 NULL
1970-01-01T00:00:00.000000005 "B" 50 NULL
1970-01-01T00:00:00.000000006 "C" 60 NULL
1970-01-01T00:00:00.000000007 "C" 70 NULL
1970-01-01T00:00:00.000000008 "C" 80 NULL
1970-01-01T00:00:00.000000009 "C" 90 NULL

# 错误输入: nth_value的n参数为零
query error Arrow error: Io error: Status \{ code: Internal, message: "Execute logical plan: Datafusion: Execution error: nth_value expect n to be > 0", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 0) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value的n参数为浮点数
query error Arrow error: Io error: Status \{ code: Internal, message: "Execute logical plan: Datafusion: Execution error: Internal\(\\"Cannot convert Float64\(2\.5\) to i64\\"\)", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 2.5) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value的n参数为字符串
query error Arrow error: Io error: Status \{ code: Internal, message: "Execute logical plan: Datafusion: Execution error: Internal\(\\"Cannot convert Utf8\(\\\\\\"second\\\\\\"\) to i64\\"\)", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, NTH_VALUE(value, 'second') OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value的expression参数为NULL
query 
SELECT time, category, value, NTH_VALUE(NULL, 2) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 NULL
1970-01-01T00:00:00.000000002 "A" 20 NULL
1970-01-01T00:00:00.000000003 "A" 30 NULL
1970-01-01T00:00:00.000000004 "B" 40 NULL
1970-01-01T00:00:00.000000005 "B" 50 NULL
1970-01-01T00:00:00.000000006 "C" 60 NULL
1970-01-01T00:00:00.000000007 "C" 70 NULL
1970-01-01T00:00:00.000000008 "C" 80 NULL
1970-01-01T00:00:00.000000009 "C" 90 NULL

# 错误输入: nth_value函数没有参数
query error Arrow error: Io error: Status \{ code: Cancelled, message: "h2 protocol error: http2 error: stream error received: stream no longer needed", source: Some\(tonic::transport::Error\(Transport, hyper::Error\(Http2, Error \{ kind: Reset\(StreamId\(3\), CANCEL, Remote\) \}\)\)\) \}
SELECT time, category, value, NTH_VALUE() OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;

# 错误输入: nth_value函数的n参数超出范围
query 
SELECT time, category, value, NTH_VALUE(value, 100) OVER (PARTITION BY category ORDER BY time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM test_nth_value order by time;
----
1970-01-01T00:00:00.000000001 "A" 10 NULL
1970-01-01T00:00:00.000000002 "A" 20 NULL
1970-01-01T00:00:00.000000003 "A" 30 NULL
1970-01-01T00:00:00.000000004 "B" 40 NULL
1970-01-01T00:00:00.000000005 "B" 50 NULL
1970-01-01T00:00:00.000000006 "C" 60 NULL
1970-01-01T00:00:00.000000007 "C" 70 NULL
1970-01-01T00:00:00.000000008 "C" 80 NULL
1970-01-01T00:00:00.000000009 "C" 90 NULL

statement ok
drop table if exists test_nth_value;

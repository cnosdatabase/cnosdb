statement ok
drop table if exists test_cume_dist;


# 创建测试表
statement ok
CREATE TABLE IF NOT EXISTS test_cume_dist (
    category string,
    value bigint
);

# 插入测试数据
statement ok
INSERT INTO test_cume_dist (time, category, value) VALUES
(1, 'A', 10),
(2, 'A', 20),
(3, 'A', 30),
(4, 'B', 40),
(5, 'B', 50),
(6, 'C', 60),
(7, 'C', 70),
(8, 'C', 80),
(9, 'C', 90);

# 基本使用：在分类内按时间排序并计算累积分布
query 
SELECT
    time,
    category,
    value,
    CUME_DIST() OVER (PARTITION BY category ORDER BY time) AS cume_dist_num
FROM test_cume_dist
ORDER BY category, time;
----
1970-01-01T00:00:00.000000001 "A" 10 0.3333333333333333
1970-01-01T00:00:00.000000002 "A" 20 0.6666666666666666
1970-01-01T00:00:00.000000003 "A" 30 1.0
1970-01-01T00:00:00.000000004 "B" 40 0.5
1970-01-01T00:00:00.000000005 "B" 50 1.0
1970-01-01T00:00:00.000000006 "C" 60 0.25
1970-01-01T00:00:00.000000007 "C" 70 0.5
1970-01-01T00:00:00.000000008 "C" 80 0.75
1970-01-01T00:00:00.000000009 "C" 90 1.0

# 在没有分区的情况下按时间排序并计算累积分布
query 
SELECT
    time,
    category,
    value,
    CUME_DIST() OVER (ORDER BY time) AS cume_dist_num
FROM test_cume_dist
ORDER BY time;
----
1970-01-01T00:00:00.000000001 "A" 10 0.1111111111111111
1970-01-01T00:00:00.000000002 "A" 20 0.2222222222222222
1970-01-01T00:00:00.000000003 "A" 30 0.3333333333333333
1970-01-01T00:00:00.000000004 "B" 40 0.4444444444444444
1970-01-01T00:00:00.000000005 "B" 50 0.5555555555555556
1970-01-01T00:00:00.000000006 "C" 60 0.6666666666666666
1970-01-01T00:00:00.000000007 "C" 70 0.7777777777777778
1970-01-01T00:00:00.000000008 "C" 80 0.8888888888888888
1970-01-01T00:00:00.000000009 "C" 90 1.0

# 在分区内按值排序并计算累积分布
query 
SELECT
    time,
    category,
    value,
    CUME_DIST() OVER (PARTITION BY category ORDER BY value DESC) AS cume_dist_num
FROM test_cume_dist
ORDER BY category, value DESC;
----
1970-01-01T00:00:00.000000003 "A" 30 0.3333333333333333
1970-01-01T00:00:00.000000002 "A" 20 0.6666666666666666
1970-01-01T00:00:00.000000001 "A" 10 1.0
1970-01-01T00:00:00.000000005 "B" 50 0.5
1970-01-01T00:00:00.000000004 "B" 40 1.0
1970-01-01T00:00:00.000000009 "C" 90 0.25
1970-01-01T00:00:00.000000008 "C" 80 0.5
1970-01-01T00:00:00.000000007 "C" 70 0.75
1970-01-01T00:00:00.000000006 "C" 60 1.0

# 多列分区：按类别和值分区并按时间排序
query 
SELECT
    time,
    category,
    value,
    CUME_DIST() OVER (PARTITION BY category, value ORDER BY time) AS cume_dist_num
FROM test_cume_dist
ORDER BY category, value, time;
----
1970-01-01T00:00:00.000000001 "A" 10 1.0
1970-01-01T00:00:00.000000002 "A" 20 1.0
1970-01-01T00:00:00.000000003 "A" 30 1.0
1970-01-01T00:00:00.000000004 "B" 40 1.0
1970-01-01T00:00:00.000000005 "B" 50 1.0
1970-01-01T00:00:00.000000006 "C" 60 1.0
1970-01-01T00:00:00.000000007 "C" 70 1.0
1970-01-01T00:00:00.000000008 "C" 80 1.0
1970-01-01T00:00:00.000000009 "C" 90 1.0

# 使用窗口函数与其他聚合函数结合
query 
SELECT
    category,
    value,
    CUME_DIST() OVER (PARTITION BY category ORDER BY value) AS cume_dist_num,
    SUM(value) OVER (PARTITION BY category) AS total_value
FROM test_cume_dist
ORDER BY category, value;
----
"A" 10 0.3333333333333333 60
"A" 20 0.6666666666666666 60
"A" 30 1.0 60
"B" 40 0.5 90
"B" 50 1.0 90
"C" 60 0.25 300
"C" 70 0.5 300
"C" 80 0.75 300
"C" 90 1.0 300

# 错误输入测试

# 错误输入: cume_dist 函数不带 OVER 子句
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'cume_dist'\.\\nDid you mean 'MEDIAN'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST()
FROM test_cume_dist;

# 错误输入: cume_dist 函数的 OVER 子句中没有 PARTITION BY 或 ORDER BY
query 
SELECT time, category, value, CUME_DIST() OVER ()
FROM test_cume_dist;
----
1970-01-01T00:00:00.000000001 "A" 10 1.0
1970-01-01T00:00:00.000000002 "A" 20 1.0
1970-01-01T00:00:00.000000003 "A" 30 1.0
1970-01-01T00:00:00.000000004 "B" 40 1.0
1970-01-01T00:00:00.000000005 "B" 50 1.0
1970-01-01T00:00:00.000000006 "C" 60 1.0
1970-01-01T00:00:00.000000007 "C" 70 1.0
1970-01-01T00:00:00.000000008 "C" 80 1.0
1970-01-01T00:00:00.000000009 "C" 90 1.0

# 错误输入: cume_dist 函数的 OVER 子句中带有无效的排序列
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Schema error: No field named non_existent_column\. Valid fields are test_cume_dist\.time, test_cume_dist\.category, test_cume_dist\.value\.", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST() OVER (PARTITION BY category ORDER BY non_existent_column)
FROM test_cume_dist;

# 错误输入: cume_dist 函数的 OVER 子句中带有无效的分区列
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Schema error: No field named non_existent_column\. Valid fields are test_cume_dist\.time, test_cume_dist\.category, test_cume_dist\.value\.", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST() OVER (PARTITION BY non_existent_column ORDER BY time)
FROM test_cume_dist;

# 错误输入: cume_dist 函数使用聚合函数
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Projection references non\-aggregate values: Expression test_cume_dist\.time could not be resolved from available columns: test_cume_dist\.category, SUM\(test_cume_dist\.value\)", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT category, SUM(value), CUME_DIST() OVER (PARTITION BY category ORDER BY time)
FROM test_cume_dist
GROUP BY category;

# 错误输入: CUME_DIST 函数的参数不是窗口函数
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'cume_dist'\.\\nDid you mean 'MEDIAN'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST(time)
FROM test_cume_dist;

# 错误输入: CUME_DIST 与其他窗口函数的参数冲突
query 
SELECT
    time,
    category,
    value,
    CUME_DIST() OVER (PARTITION BY category ORDER BY time, value) AS cume_dist_num
FROM test_cume_dist
ORDER BY category, time;
----
1970-01-01T00:00:00.000000001 "A" 10 0.3333333333333333
1970-01-01T00:00:00.000000002 "A" 20 0.6666666666666666
1970-01-01T00:00:00.000000003 "A" 30 1.0
1970-01-01T00:00:00.000000004 "B" 40 0.5
1970-01-01T00:00:00.000000005 "B" 50 1.0
1970-01-01T00:00:00.000000006 "C" 60 0.25
1970-01-01T00:00:00.000000007 "C" 70 0.5
1970-01-01T00:00:00.000000008 "C" 80 0.75
1970-01-01T00:00:00.000000009 "C" 90 1.0

# 错误输入: CUME_DIST 与空字符串参数
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: sql parser error: Expected ROWS, RANGE, GROUPS, found: ''", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST() OVER ('')
FROM test_cume_dist;

# 错误输入: CUME_DIST 与 NULL 作为参数
query error Arrow error: Io error: Status \{ code: Internal, message: "Build logical plan: Datafusion: Error during planning: Invalid function 'cume_dist'\.\\nDid you mean 'MEDIAN'\?", metadata: MetadataMap \{ headers: \{"content\-type": "application/grpc", "date": "[^"]+", "content\-length": "0"\} \}, source: None \}
SELECT time, category, value, CUME_DIST(NULL)
FROM test_cume_dist;

# 错误输入: CUME_DIST 函数中混合不同类型的排序列
query 
SELECT time, category, value, CUME_DIST() OVER (ORDER BY time, category, value)
FROM test_cume_dist;
----
1970-01-01T00:00:00.000000001 "A" 10 0.1111111111111111
1970-01-01T00:00:00.000000002 "A" 20 0.2222222222222222
1970-01-01T00:00:00.000000003 "A" 30 0.3333333333333333
1970-01-01T00:00:00.000000004 "B" 40 0.4444444444444444
1970-01-01T00:00:00.000000005 "B" 50 0.5555555555555556
1970-01-01T00:00:00.000000006 "C" 60 0.6666666666666666
1970-01-01T00:00:00.000000007 "C" 70 0.7777777777777778
1970-01-01T00:00:00.000000008 "C" 80 0.8888888888888888
1970-01-01T00:00:00.000000009 "C" 90 1.0


statement ok
drop table if exists test_cume_dist;
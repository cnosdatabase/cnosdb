name: Build package and push

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
    - name: Get tag
      id: get-tag
      run: |
        if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
          echo "TAG=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
        else
          echo "TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
        fi
    - uses: actions/checkout@v3
    - name: Prepare Rust Builder
      uses: ./.github/actions/setup-builder
    - name: Install build tools
      shell: bash
      run: |
        sudo gem install fpm
    - name: Compiler
      run: |
        if [[ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]]; then
          sudo apt install gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc" cargo build --workspace --bins --release --target aarch64-unknown-linux-gnu
        else
          cargo build --workspace --bins --release --target x86_64-unknown-linux-gnu
        fi
    - name: Package
      run: |
        bash -x ./packages/build_package.sh -n cnosdb -v ${{ steps.get-tag.outputs.TAG }} -b release -t ${{ matrix.target }}
        bash -x ./packages/build_package.sh -n cnosdb-meta -v ${{ steps.get-tag.outputs.TAG }} -b release -t ${{ matrix.target }}
    - name: Setup Ossutil
      uses: manyuanrong/setup-ossutil@v3.0
      with:
        endpoint: "oss-cn-beijing.aliyuncs.com"
        access-key-id: ${{ secrets.PACKAGING_OSS_ACCESS_KEY }}
        access-key-secret: ${{ secrets.PACKAGING_OSS_ACCESS_KEY_SECRET }}
    - name: Upload to Oss
      shell: bash
      run: |
        ossutil cp -rf ./ oss://tk3stzc21/temp/ --include "*.rpm" --include "*.deb"
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.deb
          *.rpm
        tag_name: ${{ steps.get-tag.outputs.TAG }}

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Get tag
      id: get-tag
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
          echo "TAG=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
        else
          echo "TAG=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
        fi
    - uses: actions/checkout@v3
    - name: Install Dependencies
      shell: bash
      run: |
        TARGETPLATFORM="windows/amd64" bash ./.github/tools/install_dependencies.sh
    - name: Compiler
      run: cargo build --workspace --bins --release --target x86_64-pc-windows-msvc
    - name: Package
      run: |
        New-Item -ItemType Directory -Path .\windows
        Copy-Item -Path .\target\x86_64-pc-windows-msvc\release\cnosdb.exe -Destination .\windows\cnosdb.exe
        Copy-Item -Path .\target\x86_64-pc-windows-msvc\release\cnosdb-meta.exe -Destination .\windows\cnosdb-meta.exe
        Copy-Item -Path .\target\x86_64-pc-windows-msvc\release\cnosdb-cli.exe -Destination .\windows\cnosdb-cli.exe
        Copy-Item -Path .\config\config.toml -Destination .\windows\cnosdb.conf
        Copy-Item -Path .\meta\config\config.toml -Destination .\windows\cnosdb-meta.conf
        Compress-Archive -Path .\windows\* -Destination .\cnosdb-community-${{ steps.get-tag.outputs.TAG }}-windows_x86_64.zip
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *windows_x86_64.zip
        tag_name: ${{ steps.get-tag.outputs.TAG }}
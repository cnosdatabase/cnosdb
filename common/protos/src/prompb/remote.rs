// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `remote.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.WriteRequest)
pub struct WriteRequest {
    // message fields
    // @@protoc_insertion_point(field:prometheus.WriteRequest.timeseries)
    pub timeseries: ::std::vec::Vec<super::types::TimeSeries>,
    // @@protoc_insertion_point(field:prometheus.WriteRequest.metadata)
    pub metadata: ::std::vec::Vec<super::types::MetricMetadata>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.WriteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "timeseries",
            |m: &WriteRequest| { &m.timeseries },
            |m: &mut WriteRequest| { &mut m.timeseries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "metadata",
            |m: &WriteRequest| { &m.metadata },
            |m: &mut WriteRequest| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WriteRequest>(
            "WriteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WriteRequest {
    const NAME: &'static str = "WriteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.timeseries.push(is.read_message()?);
                },
                26 => {
                    self.metadata.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.timeseries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.metadata {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn clear(&mut self) {
        self.timeseries.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WriteRequest {
        static instance: WriteRequest = WriteRequest {
            timeseries: ::std::vec::Vec::new(),
            metadata: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WriteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WriteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ReadRequest represents a remote read request.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.ReadRequest)
pub struct ReadRequest {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ReadRequest.queries)
    pub queries: ::std::vec::Vec<Query>,
    ///  accepted_response_types allows negotiating the content type of the response.
    ///
    ///  Response types are taken from the list in the FIFO order. If no response type in `accepted_response_types` is
    ///  implemented by server, error is returned.
    ///  For request that do not contain `accepted_response_types` field the SAMPLES response type will be used.
    // @@protoc_insertion_point(field:prometheus.ReadRequest.accepted_response_types)
    pub accepted_response_types: ::std::vec::Vec<::protobuf::EnumOrUnknown<read_request::ResponseType>>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ReadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "queries",
            |m: &ReadRequest| { &m.queries },
            |m: &mut ReadRequest| { &mut m.queries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "accepted_response_types",
            |m: &ReadRequest| { &m.accepted_response_types },
            |m: &mut ReadRequest| { &mut m.accepted_response_types },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadRequest>(
            "ReadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadRequest {
    const NAME: &'static str = "ReadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.queries.push(is.read_message()?);
                },
                16 => {
                    self.accepted_response_types.push(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.accepted_response_types)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.accepted_response_types {
            my_size += ::protobuf::rt::int32_size(2, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.queries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.accepted_response_types {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn clear(&mut self) {
        self.queries.clear();
        self.accepted_response_types.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ReadRequest = ReadRequest {
            queries: ::std::vec::Vec::new(),
            accepted_response_types: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ReadRequest`
pub mod read_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:prometheus.ReadRequest.ResponseType)
    pub enum ResponseType {
        // @@protoc_insertion_point(enum_value:prometheus.ReadRequest.ResponseType.SAMPLES)
        SAMPLES = 0,
        // @@protoc_insertion_point(enum_value:prometheus.ReadRequest.ResponseType.STREAMED_XOR_CHUNKS)
        STREAMED_XOR_CHUNKS = 1,
    }

    impl ::protobuf::Enum for ResponseType {
        const NAME: &'static str = "ResponseType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ResponseType> {
            match value {
                0 => ::std::option::Option::Some(ResponseType::SAMPLES),
                1 => ::std::option::Option::Some(ResponseType::STREAMED_XOR_CHUNKS),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ResponseType] = &[
            ResponseType::SAMPLES,
            ResponseType::STREAMED_XOR_CHUNKS,
        ];
    }

    impl ::protobuf::EnumFull for ResponseType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ReadRequest.ResponseType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ResponseType {
        fn default() -> Self {
            ResponseType::SAMPLES
        }
    }

    impl ResponseType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ResponseType>("ReadRequest.ResponseType")
        }
    }
}

///  ReadResponse is a response when response_type equals SAMPLES.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.ReadResponse)
pub struct ReadResponse {
    // message fields
    ///  In same order as the request's queries.
    // @@protoc_insertion_point(field:prometheus.ReadResponse.results)
    pub results: ::std::vec::Vec<QueryResult>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "results",
            |m: &ReadResponse| { &m.results },
            |m: &mut ReadResponse| { &mut m.results },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReadResponse>(
            "ReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReadResponse {
    const NAME: &'static str = "ReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.results.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.results {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn clear(&mut self) {
        self.results.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ReadResponse = ReadResponse {
            results: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.Query)
pub struct Query {
    // message fields
    // @@protoc_insertion_point(field:prometheus.Query.start_timestamp_ms)
    pub start_timestamp_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Query.end_timestamp_ms)
    pub end_timestamp_ms: i64,
    // @@protoc_insertion_point(field:prometheus.Query.matchers)
    pub matchers: ::std::vec::Vec<super::types::LabelMatcher>,
    // @@protoc_insertion_point(field:prometheus.Query.hints)
    pub hints: ::protobuf::MessageField<super::types::ReadHints>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.Query.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start_timestamp_ms",
            |m: &Query| { &m.start_timestamp_ms },
            |m: &mut Query| { &mut m.start_timestamp_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end_timestamp_ms",
            |m: &Query| { &m.end_timestamp_ms },
            |m: &mut Query| { &mut m.end_timestamp_ms },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "matchers",
            |m: &Query| { &m.matchers },
            |m: &mut Query| { &mut m.matchers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::types::ReadHints>(
            "hints",
            |m: &Query| { &m.hints },
            |m: &mut Query| { &mut m.hints },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Query>(
            "Query",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Query {
    const NAME: &'static str = "Query";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_timestamp_ms = is.read_int64()?;
                },
                16 => {
                    self.end_timestamp_ms = is.read_int64()?;
                },
                26 => {
                    self.matchers.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hints)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.start_timestamp_ms != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.start_timestamp_ms);
        }
        if self.end_timestamp_ms != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.end_timestamp_ms);
        }
        for value in &self.matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.hints.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.start_timestamp_ms != 0 {
            os.write_int64(1, self.start_timestamp_ms)?;
        }
        if self.end_timestamp_ms != 0 {
            os.write_int64(2, self.end_timestamp_ms)?;
        }
        for v in &self.matchers {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.hints.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Query {
        Query::new()
    }

    fn clear(&mut self) {
        self.start_timestamp_ms = 0;
        self.end_timestamp_ms = 0;
        self.matchers.clear();
        self.hints.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Query {
        static instance: Query = Query {
            start_timestamp_ms: 0,
            end_timestamp_ms: 0,
            matchers: ::std::vec::Vec::new(),
            hints: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Query {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Query").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.QueryResult)
pub struct QueryResult {
    // message fields
    ///  Samples within a time series must be ordered by time.
    // @@protoc_insertion_point(field:prometheus.QueryResult.timeseries)
    pub timeseries: ::std::vec::Vec<super::types::TimeSeries>,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.QueryResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResult {
    fn default() -> &'a QueryResult {
        <QueryResult as ::protobuf::Message>::default_instance()
    }
}

impl QueryResult {
    pub fn new() -> QueryResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "timeseries",
            |m: &QueryResult| { &m.timeseries },
            |m: &mut QueryResult| { &mut m.timeseries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResult>(
            "QueryResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResult {
    const NAME: &'static str = "QueryResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.timeseries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.timeseries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.timeseries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResult {
        QueryResult::new()
    }

    fn clear(&mut self) {
        self.timeseries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResult {
        static instance: QueryResult = QueryResult {
            timeseries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  ChunkedReadResponse is a response when response_type equals STREAMED_XOR_CHUNKS.
///  We strictly stream full series after series, optionally split by time. This means that a single frame can contain
///  partition of the single series, but once a new series is started to be streamed it means that no more chunks will
///  be sent for previous one. Series are returned sorted in the same way TSDB block are internally.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:prometheus.ChunkedReadResponse)
pub struct ChunkedReadResponse {
    // message fields
    // @@protoc_insertion_point(field:prometheus.ChunkedReadResponse.chunked_series)
    pub chunked_series: ::std::vec::Vec<super::types::ChunkedSeries>,
    ///  query_index represents an index of the query from ReadRequest.queries these chunks relates to.
    // @@protoc_insertion_point(field:prometheus.ChunkedReadResponse.query_index)
    pub query_index: i64,
    // special fields
    // @@protoc_insertion_point(special_field:prometheus.ChunkedReadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChunkedReadResponse {
    fn default() -> &'a ChunkedReadResponse {
        <ChunkedReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChunkedReadResponse {
    pub fn new() -> ChunkedReadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "chunked_series",
            |m: &ChunkedReadResponse| { &m.chunked_series },
            |m: &mut ChunkedReadResponse| { &mut m.chunked_series },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "query_index",
            |m: &ChunkedReadResponse| { &m.query_index },
            |m: &mut ChunkedReadResponse| { &mut m.query_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChunkedReadResponse>(
            "ChunkedReadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChunkedReadResponse {
    const NAME: &'static str = "ChunkedReadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunked_series.push(is.read_message()?);
                },
                16 => {
                    self.query_index = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunked_series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.query_index != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.query_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.chunked_series {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.query_index != 0 {
            os.write_int64(2, self.query_index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChunkedReadResponse {
        ChunkedReadResponse::new()
    }

    fn clear(&mut self) {
        self.chunked_series.clear();
        self.query_index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChunkedReadResponse {
        static instance: ChunkedReadResponse = ChunkedReadResponse {
            chunked_series: ::std::vec::Vec::new(),
            query_index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChunkedReadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChunkedReadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChunkedReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkedReadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cremote.proto\x12\nprometheus\x1a\x0btypes.proto\x1a\x14gogoproto/g\
    ogo.proto\"\x90\x01\n\x0cWriteRequest\x12<\n\ntimeseries\x18\x01\x20\x03\
    (\x0b2\x16.prometheus.TimeSeriesR\ntimeseriesB\x04\xc8\xde\x1f\0\x12<\n\
    \x08metadata\x18\x03\x20\x03(\x0b2\x1a.prometheus.MetricMetadataR\x08met\
    adataB\x04\xc8\xde\x1f\0J\x04\x08\x02\x10\x03\"\xce\x01\n\x0bReadRequest\
    \x12+\n\x07queries\x18\x01\x20\x03(\x0b2\x11.prometheus.QueryR\x07querie\
    s\x12\\\n\x17accepted_response_types\x18\x02\x20\x03(\x0e2$.prometheus.R\
    eadRequest.ResponseTypeR\x15acceptedResponseTypes\"4\n\x0cResponseType\
    \x12\x0b\n\x07SAMPLES\x10\0\x12\x17\n\x13STREAMED_XOR_CHUNKS\x10\x01\"A\
    \n\x0cReadResponse\x121\n\x07results\x18\x01\x20\x03(\x0b2\x17.prometheu\
    s.QueryResultR\x07results\"\xc2\x01\n\x05Query\x12,\n\x12start_timestamp\
    _ms\x18\x01\x20\x01(\x03R\x10startTimestampMs\x12(\n\x10end_timestamp_ms\
    \x18\x02\x20\x01(\x03R\x0eendTimestampMs\x124\n\x08matchers\x18\x03\x20\
    \x03(\x0b2\x18.prometheus.LabelMatcherR\x08matchers\x12+\n\x05hints\x18\
    \x04\x20\x01(\x0b2\x15.prometheus.ReadHintsR\x05hints\"E\n\x0bQueryResul\
    t\x126\n\ntimeseries\x18\x01\x20\x03(\x0b2\x16.prometheus.TimeSeriesR\nt\
    imeseries\"x\n\x13ChunkedReadResponse\x12@\n\x0echunked_series\x18\x01\
    \x20\x03(\x0b2\x19.prometheus.ChunkedSeriesR\rchunkedSeries\x12\x1f\n\
    \x0bquery_index\x18\x02\x20\x01(\x03R\nqueryIndexB\x08Z\x06prompbJ\x91\
    \x1c\n\x06\x12\x04\r\0W\x01\n\xbc\x04\n\x01\x0c\x12\x03\r\0\x122\xb1\x04\
    \x20Copyright\x202016\x20Prometheus\x20Team\n\x20Licensed\x20under\x20th\
    e\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20\
    you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20http://www.apache.org/licenses/LICENSE-2\
    .0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x0e\0\x13\
    \n\x08\n\x01\x08\x12\x03\x10\0\x1d\n\t\n\x02\x08\x0b\x12\x03\x10\0\x1d\n\
    \t\n\x02\x03\0\x12\x03\x12\0\x15\n\t\n\x02\x03\x01\x12\x03\x13\0\x1e\n\n\
    \n\x02\x04\0\x12\x04\x15\0\x1b\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\
    \x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x02O\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x16\x0b\x20\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16!+\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x16./\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x160N\n\x0f\n\x08\x04\0\
    \x02\0\x08\xe9\xfb\x03\x12\x03\x161M\n\x84\x01\n\x03\x04\0\t\x12\x03\x19\
    \x02\x0e\x1ax\x20Cortex\x20uses\x20this\x20field\x20to\x20determine\x20t\
    he\x20source\x20of\x20the\x20write\x20request.\n\x20We\x20reserve\x20it\
    \x20to\x20avoid\x20any\x20compatibility\x20issues.\n\n\x0b\n\x04\x04\0\t\
    \0\x12\x03\x19\x0c\r\n\x0c\n\x05\x04\0\t\0\x01\x12\x03\x19\x0c\r\n\x0c\n\
    \x05\x04\0\t\0\x02\x12\x03\x19\x0c\r\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x1a\x02Q\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\
    \x04\0\x02\x01\x06\x12\x03\x1a\x0b$\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x1a%-\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a01\n\x0c\n\x05\x04\0\
    \x02\x01\x08\x12\x03\x1a2P\n\x0f\n\x08\x04\0\x02\x01\x08\xe9\xfb\x03\x12\
    \x03\x1a3O\n;\n\x02\x04\x01\x12\x04\x1e\0:\x01\x1a/\x20ReadRequest\x20re\
    presents\x20a\x20remote\x20read\x20request.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03\x1e\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1f\x02\x1d\n\x0c\n\
    \x05\x04\x01\x02\0\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\x1f\x0b\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1f\x11\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1f\x1b\x1c\n\x0c\n\x04\x04\x01\x04\
    \0\x12\x04!\x022\x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03!\x07\x13\n\
    \x8b\x02\n\x06\x04\x01\x04\0\x02\0\x12\x03(\x04\x10\x1a\xfb\x01\x20Serve\
    r\x20will\x20return\x20a\x20single\x20ReadResponse\x20message\x20with\
    \x20matched\x20series\x20that\x20includes\x20list\x20of\x20raw\x20sample\
    s.\n\x20It's\x20recommended\x20to\x20use\x20streamed\x20response\x20type\
    s\x20instead.\n\n\x20Response\x20headers:\n\x20Content-Type:\x20\"applic\
    ation/x-protobuf\"\n\x20Content-Encoding:\x20\"snappy\"\n\n\x0e\n\x07\
    \x04\x01\x04\0\x02\0\x01\x12\x03(\x04\x0b\n\x0e\n\x07\x04\x01\x04\0\x02\
    \0\x02\x12\x03(\x0e\x0f\n\xfb\x02\n\x06\x04\x01\x04\0\x02\x01\x12\x031\
    \x04\x1c\x1a\xeb\x02\x20Server\x20will\x20stream\x20a\x20delimited\x20Ch\
    unkedReadResponse\x20message\x20that\n\x20contains\x20XOR\x20or\x20HISTO\
    GRAM(!)\x20encoded\x20chunks\x20for\x20a\x20single\x20series.\n\x20Each\
    \x20message\x20is\x20following\x20varint\x20size\x20and\x20fixed\x20size\
    \x20bigendian\n\x20uint32\x20for\x20CRC32\x20Castagnoli\x20checksum.\n\n\
    \x20Response\x20headers:\n\x20Content-Type:\x20\"application/x-streamed-\
    protobuf;\x20proto=prometheus.ChunkedReadResponse\"\n\x20Content-Encodin\
    g:\x20\"\"\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x031\x04\x17\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x031\x1a\x1b\n\xe0\x02\n\x04\
    \x04\x01\x02\x01\x12\x039\x024\x1a\xd2\x02\x20accepted_response_types\
    \x20allows\x20negotiating\x20the\x20content\x20type\x20of\x20the\x20resp\
    onse.\n\n\x20Response\x20types\x20are\x20taken\x20from\x20the\x20list\
    \x20in\x20the\x20FIFO\x20order.\x20If\x20no\x20response\x20type\x20in\
    \x20`accepted_response_types`\x20is\n\x20implemented\x20by\x20server,\
    \x20error\x20is\x20returned.\n\x20For\x20request\x20that\x20do\x20not\
    \x20contain\x20`accepted_response_types`\x20field\x20the\x20SAMPLES\x20r\
    esponse\x20type\x20will\x20be\x20used.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\
    \x12\x039\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x039\x0b\x17\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x039\x18/\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03923\nK\n\x02\x04\x02\x12\x04=\0@\x01\x1a?\x20ReadResponse\x20is\
    \x20a\x20response\x20when\x20response_type\x20equals\x20SAMPLES.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03=\x08\x14\n6\n\x04\x04\x02\x02\0\x12\x03?\x02#\
    \x1a)\x20In\x20same\x20order\x20as\x20the\x20request's\x20queries.\n\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03?\x0b\x16\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03?\x17\x1e\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03?!\"\n\n\n\x02\x04\x03\x12\x04B\0G\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03B\x08\r\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03C\x02\x1f\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03C\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03C\x08\x1a\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03C\x1d\x1e\n\x0b\n\x04\x04\x03\x02\x01\x12\x03D\x02\x1d\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03D\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03D\x08\x18\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03D\x1b\x1c\n\x0b\
    \n\x04\x04\x03\x02\x02\x12\x03E\x020\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\
    \x03E\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03E\x0b\"\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03E#+\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03E\
    ./\n\x0b\n\x04\x04\x03\x02\x03\x12\x03F\x02!\n\x0c\n\x05\x04\x03\x02\x03\
    \x06\x12\x03F\x02\x16\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03F\x17\x1c\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03F\x1f\x20\n\n\n\x02\x04\x04\x12\
    \x04I\0L\x01\n\n\n\x03\x04\x04\x01\x12\x03I\x08\x13\nD\n\x04\x04\x04\x02\
    \0\x12\x03K\x020\x1a7\x20Samples\x20within\x20a\x20time\x20series\x20mus\
    t\x20be\x20ordered\x20by\x20time.\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\
    \x03K\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03K\x0b\x20\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03K!+\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03K./\n\
    \xa6\x03\n\x02\x04\x05\x12\x04R\0W\x01\x1a\x99\x03\x20ChunkedReadRespons\
    e\x20is\x20a\x20response\x20when\x20response_type\x20equals\x20STREAMED_\
    XOR_CHUNKS.\n\x20We\x20strictly\x20stream\x20full\x20series\x20after\x20\
    series,\x20optionally\x20split\x20by\x20time.\x20This\x20means\x20that\
    \x20a\x20single\x20frame\x20can\x20contain\n\x20partition\x20of\x20the\
    \x20single\x20series,\x20but\x20once\x20a\x20new\x20series\x20is\x20star\
    ted\x20to\x20be\x20streamed\x20it\x20means\x20that\x20no\x20more\x20chun\
    ks\x20will\n\x20be\x20sent\x20for\x20previous\x20one.\x20Series\x20are\
    \x20returned\x20sorted\x20in\x20the\x20same\x20way\x20TSDB\x20block\x20a\
    re\x20internally.\n\n\n\n\x03\x04\x05\x01\x12\x03R\x08\x1b\n\x0b\n\x04\
    \x04\x05\x02\0\x12\x03S\x027\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03S\x02\
    \n\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03S\x0b#\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03S$2\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03S56\nm\n\x04\x04\
    \x05\x02\x01\x12\x03V\x02\x18\x1a`\x20query_index\x20represents\x20an\
    \x20index\x20of\x20the\x20query\x20from\x20ReadRequest.queries\x20these\
    \x20chunks\x20relates\x20to.\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03V\
    \x02\x07\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03V\x08\x13\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03V\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::types::file_descriptor().clone());
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(WriteRequest::generated_message_descriptor_data());
            messages.push(ReadRequest::generated_message_descriptor_data());
            messages.push(ReadResponse::generated_message_descriptor_data());
            messages.push(Query::generated_message_descriptor_data());
            messages.push(QueryResult::generated_message_descriptor_data());
            messages.push(ChunkedReadResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(read_request::ResponseType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

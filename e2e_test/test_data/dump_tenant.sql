-- Dump Global Object
create user if not exists "test_au_u1" with must_change_password=false, granted_admin=false;
create user if not exists "test_au_u2" with must_change_password=false, granted_admin=true;
create user if not exists "test_cdi_u1" with must_change_password=false, granted_admin=false;
create user if not exists "test_ts_u1" with must_change_password=false, granted_admin=false;
create user if not exists "test_ts_u2" with must_change_password=false, granted_admin=false;
create user if not exists "test_us_u1" with comment='test comment', must_change_password=false, granted_admin=false;
create user if not exists "test_us_u2" with must_change_password=false, granted_admin=false;
create user if not exists "writer" with must_change_password=false, granted_admin=false;
-- Dump Tenant cnosdb Object
\change_tenant cnosdb
create database if not exists "alter_database" with precision 'US' ttl '30D' shard 6 replica 1 vnode_duration '100D';
create database if not exists "alter_table" with ttl '100000D';
create database if not exists "avg_daily_driving_duration" with ttl '3650D';
create database if not exists "bottom_func" with ttl '100000D';
create database if not exists "ci_table_db" with ttl '3650D';
create database if not exists "cli_precision" with precision 'MS' ttl '100000D';
create database if not exists "create_external_table" with ttl '100000D';
create database if not exists "createstreamtable";
create database if not exists "db_precision" with precision 'MS' ttl '100000D';
create database if not exists "describe_database" with ttl '10D';
create database if not exists "empty_table";
create database if not exists "explain_stream_query";
create database if not exists "filter_push_down" with ttl '100000D';
create database if not exists "http_stream_select" with ttl '100000D';
create database if not exists "limit" with ttl '100000D';
create database if not exists "only_tag_col" with ttl '100000D';
create database if not exists "only_time_col" with ttl '100000D';
create database if not exists "show_series" with ttl '100000D';
create database if not exists "show_tag_values" with ttl '100000D';
create database if not exists "sqlancer1" with ttl '100000D';
create database if not exists "sqlancer2" with ttl '100000D';
create database if not exists "sqlancer3" with ttl '100000D';
create database if not exists "tc_between" with ttl '100000D';
create database if not exists "test_lp_writer" with ttl '10000D';
create database if not exists "topk_func" with ttl '100000D';
create database if not exists "usage_schema";
create role "lp_writer" inherit member;
grant Read on database "lp_writer" to "lp_writer";
create role "role_a" inherit member;
alter tenant "cnosdb" add user "test_au_u1" as "member";
alter tenant "cnosdb" add user "test_au_u2" as "member";
alter tenant "cnosdb" add user "test_cdi_u1" as "owner";
alter tenant "cnosdb" add user "test_ts_u1" as "owner";
alter tenant "cnosdb" add user "test_ts_u2" as "member";
alter tenant "cnosdb" add user "test_us_u1" as "owner";
alter tenant "cnosdb" add user "test_us_u2" as "member";
alter tenant "cnosdb" add user "writer" as "lp_writer";
create table "alter_table"."test" ("f1" BIGINT, "f0" BIGINT, "d0" DOUBLE, "s0" STRING, "b0" BOOLEAN, tags ("t0", "t1"));
create table "avg_daily_driving_duration"."readings_kv" ("latitude" DOUBLE, "longitude" DOUBLE, "elevation" DOUBLE, "velocity" DOUBLE, "heading" DOUBLE, "grade" DOUBLE, "fuel_consumption" DOUBLE, "load_capacity" DOUBLE, "fuel_capacity" DOUBLE, "nominal_fuel_consumption" DOUBLE, tags ("name", "fleet", "driver", "model", "device_version"));
create external table "avg_daily_driving_duration"."readings" stored as PARQUET location 'query_server/test/resource/parquet/part-0.parquet';
create table "bottom_func"."m2" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1", "t2"));
create table "ci_table_db"."inner_csv" ("bigint_c" BIGINT, "string_c" STRING, "ubigint_c" BIGINT UNSIGNED, "boolean_c" BOOLEAN, "double_c" DOUBLE, tags ("tag1", "tag2"));
create table "ci_table_db"."inner_csv_v2" ("string_c" STRING, "bigint_c" BIGINT, "boolean_c" BOOLEAN, "ubigint_c" BIGINT UNSIGNED, "double_c" DOUBLE, tags ("tag1", "tag2"));
create table "ci_table_db"."inner_parquet" ("latitude" DOUBLE, "longitude" DOUBLE, "elevation" DOUBLE, "velocity" DOUBLE, "heading" DOUBLE, "grade" DOUBLE, "fuel_consumption" DOUBLE, "load_capacity" DOUBLE, "fuel_capacity" DOUBLE, "nominal_fuel_consumption" DOUBLE, tags ("name", "fleet", "driver", "model", "device_version"));
create table "cli_precision"."nice" ("value" DOUBLE, tags ("dc", "host"));
create table "cli_precision"."test1" ("fa" DOUBLE, "fb" DOUBLE, tags ("ta", "tb"));
create table "cli_precision"."test2" ("value" DOUBLE, tags ("ta", "tb"));
create external table "create_external_table"."cpu" ("cpu_hz" DECIMAL(10,6), "temp" DOUBLE, "version_num" BIGINT, "is_old" BOOLEAN, "weight" DECIMAL(12,7)) stored as CSV with header row delimiter ',' location 'query_server/query/tests/data/csv/decimal_data.csv';
create table "createstreamtable"."test0" ("column1" BIGINT, "column2" STRING, "column3" BIGINT UNSIGNED, "column4" BOOLEAN, "column5" DOUBLE, tags ("column6", "column7"));
create table "db_precision"."ms_t" ("value" BIGINT, tags ("str"));
create table "db_precision"."test" ("col" BIGINT, tags ());
create table "describe_database"."test0" ("column1" BIGINT, "column2" STRING, "column3" BIGINT UNSIGNED, "column4" BOOLEAN, "column5" DOUBLE, tags ("column6", "column7"));
create table "empty_table"."empty" ("f" DOUBLE, tags ("t"));
create table "explain_stream_query"."test0" ("column1" BIGINT, "column2" STRING, "column3" BIGINT UNSIGNED, "column4" BOOLEAN, "column5" DOUBLE, tags ("column6", "column7"));
create stream table "explain_stream_query"."tskvtable" ("time" TIMESTAMP, "column1" STRING, "column6" STRING) with (db='explain_stream_query', table='test0', event_time_column='time') engine = tskv;
create stream table "explain_stream_query"."tskvtablewithoutschema" with (db='explain_stream_query', table='test0', event_time_column='time') engine = tskv;
create table "filter_push_down"."m0" ("f0" BIGINT, "f1" STRING, "f2" BIGINT UNSIGNED, "f3" BOOLEAN, "f4" DOUBLE, tags ("t0", "t1"));
create table "http_stream_select"."m0" ("f0" BOOLEAN, "f1" DOUBLE, tags ("t0"));
create table "limit"."limit_test" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1"));
create table "only_tag_col"."m2" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1", "t2"));
create table "only_time_col"."m2" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1", "t2"));
create table "public"."air" ("visibility" DOUBLE, "temperature" DOUBLE, "presssure" DOUBLE, tags ("station", "region"));
create table "public"."test" ("column1" BIGINT, "column2" STRING, "column3" BIGINT UNSIGNED, "column4" BOOLEAN, "column5" DOUBLE, tags ("column6", "column7"));
create table "public"."test_double_conv" ("fa" DOUBLE, "fb" DOUBLE, tags ("ta", "tb"));
create table "public"."test_insert_subquery" ("fa" DOUBLE, "fb" DOUBLE, tags ("ta", "tb"));
create table "public"."test_timestamp_conv" ("fa" DOUBLE, "fb" DOUBLE, tags ("ta", "tb"));
create external table "public"."ci_location_tbl" stored as PARQUET location 'query_server/test/resource/parquet/part-0.parquet';
create external table "public"."ci_location_tbl2_ext" stored as PARQUET location 'file:///tmp/data/parquet_out2/';
create external table "public"."ci_location_tbl_ext" stored as PARQUET location 'file:///tmp/data/parquet_out1/';
create external table "public"."ci_location_tbl_ext_csv" ("time" TIMESTAMP, "name" STRING) stored as CSV with header row delimiter ',' location 'file:///tmp/data/csv_out/';
create external table "public"."ci_location_tbl_ext_json" ("name" STRING, "time" STRING) stored as JSON location 'file:///tmp/data/json_out/';
create external table "public"."local_to_table_json" ("name" STRING, "time" STRING) stored as JSON location 'file:///tmp/data/json_out/';
create table "show_series"."test" ("f0" DOUBLE, "f1" STRING, tags ("t0", "t1", "t2"));
create table "show_tag_values"."test" ("f0" DOUBLE, "f1" STRING, tags ("t0", "t1", "t2"));
create table "sqlancer1"."m0" ("f0" DOUBLE, "f1" BOOLEAN, tags ("ta"));
create table "sqlancer2"."m0" ("f0" BOOLEAN, "f1" DOUBLE, tags ("t0"));
create table "sqlancer2"."m1" ("f0" STRING, "f1" BOOLEAN, tags ("t0"));
create table "sqlancer2"."m2" ("f0" BOOLEAN, "f1" STRING, tags ("t0"));
create table "sqlancer2"."m3" ("f0" BIGINT, "f1" BOOLEAN, tags ("t0", "t1"));
create table "sqlancer2"."m4" ("f0" BIGINT, tags ("t0", "t1", "t2"));
create table "sqlancer3"."m0" ("f0" DOUBLE, tags ("t0"));
create table "sqlancer3"."m1" ("f0" STRING, "f1" BOOLEAN, "f2" BIGINT, tags ("t0"));
create table "sqlancer3"."m2" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1", "t2"));
create table "sqlancer3"."m3" ("f0" BIGINT, tags ("t0", "t1"));
create table "sqlancer3"."m4" ("f0" BOOLEAN, tags ("t0", "t1"));
create table "tc_between"."m2" ("f0" BIGINT UNSIGNED, "f1" BIGINT, tags ("t0", "t1"));
create table "topk_func"."m2" ("f0" BIGINT, "f1" DOUBLE, tags ("t0", "t1", "t2"));
create table if not exists "usage_schema"."coord_data_in" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant"));
create table if not exists "usage_schema"."coord_data_out" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant"));
create table if not exists "usage_schema"."coord_queries" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant"));
create table if not exists "usage_schema"."coord_writes" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant"));
create table if not exists "usage_schema"."http_data_in" ("value" BIGINT UNSIGNED, tags ("api", "host", "node_id", "tenant", "user", "database"));
create table if not exists "usage_schema"."http_data_out" ("value" BIGINT UNSIGNED, tags ("api", "host", "node_id", "tenant", "user"));
create table if not exists "usage_schema"."http_queries" ("value" BIGINT UNSIGNED, tags ("api", "host", "node_id", "tenant", "user"));
create table if not exists "usage_schema"."http_query_duration" ("value" DOUBLE, tags ("api", "host", "le", "node_id", "tenant", "user"));
create table if not exists "usage_schema"."http_write_duration" ("value" DOUBLE, tags ("api", "database", "host", "le", "node_id", "tenant", "user"));
create table if not exists "usage_schema"."http_writes" ("value" BIGINT UNSIGNED, tags ("api", "database", "host", "node_id", "tenant", "user"));
create table if not exists "usage_schema"."sql_data_in" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant"));
create table if not exists "usage_schema"."vnode_cache_size" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant", "vnode_id"));
create table if not exists "usage_schema"."vnode_disk_storage" ("value" BIGINT UNSIGNED, tags ("database", "node_id", "tenant", "vnode_id"));

